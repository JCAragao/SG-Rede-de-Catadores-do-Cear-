using Org.BouncyCastle.Asn1.X509;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.Button;

namespace Sistema_de_Gerenciamento_da_Rede_de_Catadores_do_Ceará__Versão_Teste_
{
    public partial class CadastroCatador : Form
    {
        public CadastroCatador()
        {
            InitializeComponent();
        }

        private void CadastroCatador_Load(object sender, EventArgs e)
        {
            string Nomedoservidor = lbl_NomedoServidor.Text;
            string vqueryCidade = @"SELECT * FROM CIDADES ORDER BY ID_Cidade ASC ;";
            cbb_CidadeCadastroCatador.DataSource = ConexaoBancodeDados.dql(vqueryCidade, Nomedoservidor);
            cbb_CidadeCadastroCatador.DisplayMember = "Cidade";
            cbb_CidadeCadastroCatador.ValueMember = "ID_Cidade";
        }

        private void button1_Click(object sender, EventArgs e)
        {   if (txt_NomeCompletoCadastrarCatador.Text != "")
            {
                if (txt_DatadeNascimentoCadastroCatador.Text != "")
                {
                    string format = "dd/MM/yyyy";
                    string DatadeNascimento = txt_DatadeNascimentoCadastroCatador.Text;
                    DateTime dateTime;
                    if (DateTime.TryParseExact(DatadeNascimento, format, CultureInfo.InvariantCulture, DateTimeStyles.AllowWhiteSpaces, out dateTime))
                    {
                        string DatadeMatricula= txt_DatadeMatriculaCadastroCatador.Text;
                        if (DateTime.TryParseExact(DatadeMatricula, format, CultureInfo.InvariantCulture, DateTimeStyles.AllowWhiteSpaces, out dateTime))
                        {
                            if (txt_DatadeMatriculaCadastroCatador.Text != "")
                            {
                                if (cbb_GeneroCadastroCatador.SelectedIndex != -1)
                                {
                                    if (txt_RGCadastroCatador.Text != "")
                                    {
                                        if (txt_CPFCadastroCatador.Text != "")
                                        {
                                            if (txt_CEPCadastroCatador.Text != "")
                                            {
                                                if (cbb_CidadeCadastroCatador.SelectedIndex != -1)
                                                {
                                                    if (txt_TelefoneCadastroCatador.Text != "")
                                                    {
                                                        if (txt_BairroCadastroCatador.Text != "")
                                                        {
                                                            if (txt_RuaCadastroCatador.Text != "")
                                                            {
                                                                if (txt_NISCadastroCatador.Text != "")
                                                                {
                                                                    if(cbb_Funcao.SelectedIndex != -1)
                                                                    {
                                                                       
                                                                        Criptografia cryptography = new Criptografia(System.Configuration.ConfigurationManager.AppSettings[""]);
                                                                        string BairroCrip = cryptography.Encriptar(txt_BairroCadastroCatador.Text);
                                                                        string RuaCrip = cryptography.Encriptar(txt_RuaCadastroCatador.Text);
                                                                        string DatadeNascimentoCrip = cryptography.Encriptar(txt_DatadeNascimentoCadastroCatador.Text);
                                                                        string DatadeMatriculaCrip = cryptography.Encriptar(txt_DatadeMatriculaCadastroCatador.Text);
                                                                        string RGCrip = cryptography.Encriptar(txt_RGCadastroCatador.Text);
                                                                        string CPFCrip = cryptography.Encriptar(txt_CPFCadastroCatador.Text);
                                                                        string NISCrip = cryptography.Encriptar(txt_NISCadastroCatador.Text);
                                                                        string GeneroCrip = cryptography.Encriptar(cbb_GeneroCadastroCatador.Text);
                                                                        string TelefoneCrip = cryptography.Encriptar(txt_TelefoneCadastroCatador.Text);
                                                                        string CEPCrip = cryptography.Encriptar(txt_CEPCadastroCatador.Text);
                                                                        string AdministradorCrip = cryptography.Encriptar(lbl_UsuariodoCadastroCatador.Text);
                                                                        string FuncaoCrip =(cbb_Funcao.Text);

                                                                        CadastroCatadorClasse CatadorNovo = new CadastroCatadorClasse();
                                                                        CatadorNovo.NomeCompletoCatador = txt_NomeCompletoCadastrarCatador.Text;
                                                                        CatadorNovo.CidadeCadastroCatador = cbb_CidadeCadastroCatador.Text;
                                                                        CatadorNovo.BairroCadastroCatador = BairroCrip;
                                                                        CatadorNovo.RuaCadastroCatador = RGCrip;
                                                                        CatadorNovo.DatadeNascimentoCadastroCatador = DatadeNascimentoCrip;
                                                                        CatadorNovo.DatadeMatriculaCadastroCatador = DatadeMatriculaCrip;
                                                                        CatadorNovo.RGCadastroCatador = RuaCrip;
                                                                        CatadorNovo.CPFCadastroCatador = CPFCrip;
                                                                        CatadorNovo.NISCadastroCatador = NISCrip;
                                                                        CatadorNovo.GeneroCadastroCatador = GeneroCrip;
                                                                        CatadorNovo.TelefoneCadastroCatador = TelefoneCrip;
                                                                        CatadorNovo.CEPCadastroCatador = CEPCrip;
                                                                        CatadorNovo.AuxilioCatador = txt_RecebeAuxilioCatadorCadastroCatador.Text;
                                                                        CatadorNovo.AdminstradorCadastroCatador = AdministradorCrip;
                                                                        CatadorNovo.UnidadeCadastroCatadr = lbl_UnidadeAdministradorCatador.Text;
                                                                        CatadorNovo.Funcao = FuncaoCrip;
                                                                        CatadorNovo.Nomedoservidor = lbl_NomedoServidor.Text;
                                                                        ConexaoBancodeDados.NewCatador(CatadorNovo);
                                                                        string NomedoServidor = lbl_NomedoServidor.Text;
                                                                       
                                                                        SqlConnection Conectar = new SqlConnection("Data Source=DESKTOP-" + NomedoServidor + "\\SQLEXPRESS;Initial Catalog=SGRRC1;Integrated Security=True");
                                                                        Conectar.Open();
                                                                        string NomeCatadorDecrip = txt_NomeCompletoCadastrarCatador.Text;

                                                                        SqlCommand cmd = new SqlCommand("Select [ID_Catador] from CATADORES where [Catador] ='" + NomeCatadorDecrip + "' and [Unidade] = '"+lbl_UnidadeAdministradorCatador.Text+"'", Conectar);
                                                                        var CatadorID = cmd.ExecuteScalar();

                                                                        SqlCommand cmd2 = new SqlCommand("Select [ID_Funcao] from FUNCOES where [Funcao] = '"+cbb_Funcao.Text+"' and [Unidade] = '"+lbl_UnidadeAdministradorCatador.Text+"'", Conectar);
                                                                        var Funcao = cmd2.ExecuteScalar();

                                                                        SqlCommand cmd3 = new SqlCommand("Select [ID_Associacao] from ASSOCIACAO where [Nome Fantasia] = '"+lbl_UnidadeAdministradorCatador.Text+"'", Conectar);
                                                                        var Associacao = cmd3.ExecuteScalar();

                                                                        string catadordata = DateTime.Now.ToShortDateString();
                                                                        string output = string.Concat(catadordata.Where(Char.IsDigit));
                                                                        string Matrícula = Funcao.ToString() + Associacao.ToString() + output + CatadorID.ToString();

                                                                        MessageBox.Show("Número de Matrícula:" + Matrícula);

                                                                        SqlCommand cmd4 = new SqlCommand("UPDATE CATADORES SET [Matrícula] = '"+ Matrícula + "' where [ID_Catador] = '" + CatadorID + "'", Conectar);
                                                                        
                                                                        var Matriculacmd = cmd4.ExecuteNonQuery();

                                                                        Conectar.Close();
                                                                        this.Close();
                                                                    }
                                                                    else
                                                                    {
                                                                        MessageBox.Show("Escolha uma função!");

                                                                    }
                                                                }
                                                                else
                                                                {

                                                                    txt_NISCadastroCatador.Text = "0000000000";

                                                                }
                                                            }
                                                            else
                                                            {

                                                                MessageBox.Show("O campo Rua e Número não foi preenchido", "Campo inválido", MessageBoxButtons.OK);
                                                                return;

                                                            }
                                                        }
                                                        else
                                                        {

                                                            MessageBox.Show("O campo Bairro não foi preenchido", "Campo inválido", MessageBoxButtons.OK);
                                                            return;

                                                        }
                                                    }
                                                    else
                                                    {

                                                        MessageBox.Show("O campo Telefone não foi preenchido", "Campo inválido", MessageBoxButtons.OK);
                                                        return;

                                                    }
                                                }
                                                else
                                                {

                                                    MessageBox.Show("O campo Cidade não foi preenchido", "Campo inválido", MessageBoxButtons.OK);
                                                    return;

                                                }
                                            }
                                            else
                                            {

                                                MessageBox.Show("O campo CEP não foi preenchido", "Campo inválido", MessageBoxButtons.OK);
                                                return;

                                            }


                                        }
                                        else
                                        {

                                            MessageBox.Show("O campo CPF não foi preenchido", "Campo inválido", MessageBoxButtons.OK);
                                            return;

                                        }
                                    }
                                    else
                                    {

                                        MessageBox.Show("O campo RG não foi preenchido", "Campo inválido", MessageBoxButtons.OK);
                                        return;

                                    }
                                }

                                else
                                {

                                    MessageBox.Show("O campo Gênero não foi preenchido", "Campo inválido", MessageBoxButtons.OK);
                                    return;

                                }
                            }


                            else
                            {

                                MessageBox.Show("O campo Data de Matrícula não foi preenchido", "Campo inválido", MessageBoxButtons.OK);
                                return;

                            }

                        }
                        else
                        {

                            MessageBox.Show("Digite um formato de data válido. Ex: (01/01/ 1975)");
                            return;

                        }




                    }
                    else
                    {
                        MessageBox.Show("Digite um formato de data válido. Ex: (07/02/1998)");
                        return;
                    }
              
                }
                else
                {

                    MessageBox.Show("O campo Data de Nascimento não foi preenchido", "Campo inválido", MessageBoxButtons.OK);
                    return;

                }
            }
            else
            {

                MessageBox.Show("O campo Nome Completo não foi preenchido", "Campo inválido", MessageBoxButtons.OK);
                return;

            }

        }

        private void txt_RGCadastroCatador_KeyPress(object sender, KeyPressEventArgs e)
        {

            if ((!char.IsNumber(e.KeyChar)) && !char.IsControl(e.KeyChar) && e.KeyChar != '/')
            {
                e.Handled = true;
            }
        }

        private void txt_CPFCadastroCatador_KeyPress(object sender, KeyPressEventArgs e)
        {
            if ((!char.IsNumber(e.KeyChar)) && !char.IsControl(e.KeyChar))
            {
                e.Handled = true;

            }


        }

        private void txt_NISCadastroCatador_KeyPress(object sender, KeyPressEventArgs e)
        {
            if ((!char.IsNumber(e.KeyChar)))
            {
                e.Handled = true;

            }


        }

        private void txt_CEPCadastroCatador_KeyPress(object sender, KeyPressEventArgs e)
        {

            if ((!char.IsNumber(e.KeyChar)))
            {
                e.Handled = true;

            }



        }

        private void txt_NumeroCadastroCatador_KeyPress(object sender, KeyPressEventArgs e)
        {


            if ((!char.IsNumber(e.KeyChar)) && !char.IsControl(e.KeyChar))
            {
                e.Handled = true;

            }

        }

        private void txt_RGCadastroCatador_KeyPress_1(object sender, KeyPressEventArgs e)
        {
            if ((!char.IsNumber(e.KeyChar)) && !char.IsControl(e.KeyChar))
            {
                e.Handled = true;

            }

        }

        private void txt_CPFCadastroCatador_KeyPress_1(object sender, KeyPressEventArgs e)
        {
            if ((!char.IsNumber(e.KeyChar)) && !char.IsControl(e.KeyChar))
            {
                e.Handled = true;

            }

        }

        private void txt_DatadeNascimentoCadastroCatador_KeyPress(object sender, KeyPressEventArgs e)
        {
            if ((!char.IsNumber(e.KeyChar)) && !char.IsControl(e.KeyChar) && e.KeyChar != '/')
            {
                e.Handled = true;

            }
        }

        private void txt_DatadeMatriculaCadastroCatador_KeyPress(object sender, KeyPressEventArgs e)
        {
            if ((!char.IsNumber(e.KeyChar)) && !char.IsControl(e.KeyChar) && e.KeyChar != '/')
            {
                e.Handled = true;

            }
        }

        private void txt_NISCadastroCatador_KeyPress_1(object sender, KeyPressEventArgs e)
        {

            if ((!char.IsNumber(e.KeyChar)) && !char.IsControl(e.KeyChar))
            {
                e.Handled = true;

            }

        }

        private void txt_TelefoneCadastroCatador_KeyPress(object sender, KeyPressEventArgs e)
        {

            if ((!char.IsNumber(e.KeyChar)) && !char.IsControl(e.KeyChar) && e.KeyChar != '(' && e.KeyChar != ')' && e.KeyChar != '-')
            {
                e.Handled = true;
            }

        }

        private void chb_RecebeAuxílioCatadorCadastroCatador_CheckedChanged(object sender, EventArgs e)
        { 
            
                if (chb_RecebeAuxílioCatadorCadastroCatador.Checked == true)
                {
                txt_RecebeAuxilioCatadorCadastroCatador.Text = "Recebe";
                }

                else
                {
                txt_RecebeAuxilioCatadorCadastroCatador.Text = "Não Recebe";

                }
        }

            private void btn_CancelarCadastrarCatador_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void txt_NomeCompletoCadastrarCatador_KeyPress(object sender, KeyPressEventArgs e)
        {
            if ((!char.IsLetter(e.KeyChar)) && !char.IsControl(e.KeyChar) && Convert.ToInt32(e.KeyChar) != 8 && Convert.ToInt32(e.KeyChar) != 32)
            {
                e.Handled = true;
            }
        }

        private void txt_BairroCadastroCatador_KeyPress(object sender, KeyPressEventArgs e)
        {
            if ((!char.IsLetter(e.KeyChar)) && !char.IsControl(e.KeyChar) && Convert.ToInt32(e.KeyChar) != 8 && Convert.ToInt32(e.KeyChar) != 32)
            {
                e.Handled = true;
            }
        }

        private void txt_RuaCadastroCatador_KeyPress(object sender, KeyPressEventArgs e)
        {
            if ((!char.IsNumber(e.KeyChar)) && (!char.IsLetter(e.KeyChar)) && !char.IsControl(e.KeyChar) && Convert.ToInt32(e.KeyChar) != 8 && Convert.ToInt32(e.KeyChar) != 32)
            {
                e.Handled = true;
            }
        }

        private void txt_CEPCadastroCatador_KeyPress_1(object sender, KeyPressEventArgs e)
        {
            if ((!char.IsNumber(e.KeyChar)) && !char.IsControl(e.KeyChar))
            {
                e.Handled = true;

            }
        }

        private void cbb_Funcao_SelectedIndexChanged(object sender, EventArgs e)
        {
            txt_Funcao.Text = cbb_Funcao.SelectedItem.ToString();
        }
    

        private void cbb_AssociacaoCadastroCatador_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void cbb_Funcao_Click(object sender, EventArgs e)
        {

            string NomedoServidor = lbl_NomedoServidor.Text;
            SqlConnection Conectar = new SqlConnection("Data Source=DESKTOP-" + NomedoServidor + "\\SQLEXPRESS;Initial Catalog=SGRRC1;Integrated Security=True");
            Conectar.Open();
            SqlCommand cmd = new SqlCommand(@"SELECT * FROM FUNCOES where [Unidade] = '" + lbl_UnidadeAdministradorCatador.Text + "' ORDER BY Funcao ASC ; ", Conectar);
            var NomeFantasia = cmd.ExecuteScalar();

          if (NomeFantasia != null)
            {
                string Nomedoservidor = lbl_NomedoServidor.Text;

                string vqueryFuncao = @"SELECT * FROM FUNCOES where [Unidade] = '" + lbl_UnidadeAdministradorCatador.Text + "' ORDER BY Funcao ASC ;";
                cbb_Funcao.DataSource = ConexaoBancodeDados.dql(vqueryFuncao, Nomedoservidor);
                cbb_Funcao.DisplayMember = "Funcao";
            }
            
            Conectar.Close();

         
            
        }
    }
    
}
